http:
#################            
# HTTP routers #
################
  routers:
    router-secure:
      service: router
      rule: Host(`router.apex-migrations.net`)
      entryPoints:
        - web-secure
      middlewares:
        - real-ip-foo@file
        - IP2Location@file
        - authelia-secure@docker
      tls:
        certResolver: production

    ittools-secure:
      service: ittools
      rule: Host(`ittools.apex-migrations.net`)
      entryPoints:
        - web-secure
      middlewares:
        - real-ip-foo@file
        - IP2Location@file
      tls:
        certResolver: production

    uptime-secure:
      service: uptime
      rule: Host(`uptime.apex-migrations.net`)
      entryPoints:
        - web-secure
      middlewares:
        - real-ip-foo@file
        - IP2Location@file
      tls:
        certResolver: production

    authelia-secure:
      service: authelia
      rule: Host(`auth.apex-migrations.net`)
      entryPoints:
        - web-secure
      middlewares:
        - real-ip-foo@file
        - IP2Location@file
      tls:
        certResolver: production

    portainer-secure:
      service: portainer
      rule: Host(`portainer.apex-migrations.net`)
      entryPoints:
        - web-secure
      middlewares:
        - real-ip-foo@file
        - IP2Location@file
      tls:
        certResolver: production

    grafana-secure:
      service: grafana
      rule: Host(`grafana.apex-migrations.net`)
      entryPoints:
        - web-secure
      middlewares:
        - real-ip-foo@file
        - IP2Location@file
      tls:
        certResolver: production

    guacamole-secure:
      service: guacamole
      rule: Host(`guacamole.apex-migrations.net`)
      entryPoints:
        - web-secure
      middlewares:
        - real-ip-foo@file
        - authelia-secure@docker
        - IP2Location@file
      tls:
        certResolver: production

    dashboard-secure:
      service: dashboard
      rule: Host(`dashboard.apex-migrations.net`)
      entryPoints:
        - web-secure
      middlewares:
        - real-ip-foo@file
        - authelia-secure@docker
        - IP2Location@file
      tls:
        certResolver: production

    nextcloud-secure:
      service: nextcloud
      rule: Host(`cloud.apex-migrations.net`)
      entryPoints:
        - web-secure
      middlewares:
        - real-ip-foo@file
        - IP2Location@file
        - nextcloud@docker
        - nextcloud_redirect@docker
        - nextcloud_redirect1@docker
        - nextcloud_redirect2@docker
      tls:
        certResolver: production

    traefik-dashboard:
      service: api@internal
      rule: Host(`traefik.apex-migrations.net`)
      entryPoints:
        - web-secure
      middlewares:
        - real-ip-foo@file
        - IP2Location@file
        - authelia-secure@docker
      tls:
        certResolver: production

    # prometheus-dashboard:
    #   service: prometheus@internal
    #   rule: Host(`prometheus.apex-migrations.net`)
    #   entryPoints:
    #     - web-secure
    #   middlewares:
    #     - real-ip-foo@file
    #   tls:
    #     certResolver: production

    # cadvisor:
    #   service: cadvisor
    #   rule: Host(`cadvisor.apex-migrations.net`)
    #   middlewares:
    #     - real-ip-foo@file
    #   entryPoints:
    #     - web-secure
    #   tls:
    #     certResolver: production

####################
# HTTP Middlewares #
####################
  middlewares:
    IP2Location:
      plugin:
        ip2location:
          filename: /configurations/IP2LOCATION-LITE-DB11.BIN
          fromHeader: X-Real-IP # optional
          disableErrorHeader: false
          headers:
            CountryShort: X-GEO-CountryShort
            CountryLong: X-GEO-CountryLong
            Region: X-GEO-Region
            City: X-GEO-City
            #Isp: X-GEO-Isp
            Latitude: X-GEO-Latitude
            Longitude: X-GEO-Longitude
            #Domain: X-GEO-Domain
            Zipcode: X-GEO-Zipcode
            Timezone: X-GEO-Timezone
            #Netspeed: X-GEO-Netspeed
            #Iddcode: X-GEO-Iddcode
            #Areacode: X-GEO-Areacode

    real-ip-foo:
      plugin:
        real-ip:
          Proxy:
            - proxyHeadername: X-From-Cdn
              proxyHeadervalue: mf-fun
              realIP: X-Forwarded-For
            - proxyHeadername: X-From-Cdn
              proxyHeadervalue: mf-bar
              realIP: Client-Ip
              OverwriteXFF: true # default: false, v1.0.2 or above
            - proxyHeadername: X-From-Cdn
              proxyHeadervalue: cf-foo
              realIP: Cf-Connecting-Ip
              OverwriteXFF: true # default: false, v1.0.2 or above
            - proxyHeadername: "*"
              realIP: RemoteAddr

    my-traefik-plugin-geoblock:
            plugin:
                traefik-plugin-geoblock:
                    enabled: "true"

###############################################################################
# URL can be an hostname/ip of docker container, or ip address on the network #
###############################################################################
  services:
#################            
# HTTP services #
#################
    router:
      loadBalancer:
        servers:
          - url: http://192.168.2.1:80
        passHostHeader: false
        # When sticky sessions are enabled, a Set-Cookie header is set on the initial response to let the client know which server handles the first response.
        sticky:
         cookie:
            name: sticky_cookie
            secure: true
            httpOnly: true

    prometheus:
      loadBalancer:
        servers:
          - url: http://grafana.prometheus:9090
        passHostHeader: false

    cadvisor:
      loadBalancer:
        servers:
          - url: http://grafana.cadvisor:8080
        passHostHeader: false

    nextcloud:
      loadBalancer:
        servers:
          - url: http://nextcloud:80
        passHostHeader: true

    authelia:
      loadBalancer:
        servers:
          - url: http://authelia:9091
        passHostHeader: false

    dashboard:
      loadBalancer:
        servers:
          - url: http://heimdall.dashboard:80
        passHostHeader: false

    guacamole:
      loadBalancer:
        servers:
          - url: http://guacamole:8080
        passHostHeader: false

    grafana:
      loadBalancer:
        servers:
          - url: http://grafana:3000
        passHostHeader: true

    portainer:
      loadBalancer:
        servers:
          - url: http://portainer.containers:9000
        passHostHeader: false

    uptime:
      loadBalancer:
        servers:
          - url: http://uptime-kuma:3001
        passHostHeader: false

    ittools:
      loadBalancer:
        servers:
          - url: http://dev.tools:80
        passHostHeader: false

####################################
# TLS options and cypher specified #
####################################
tls:
  certificates:
    - certFile: /traefik-ssl-certs/apex-migrations.cert
      keyFile: /traefik-ssl-certs/apex-migrations.key
      stores:
        - defaultStore
  stores:
    defaultStore:
      defaultGeneratedCert:
        resolver: production
        domain:
          main: apex-migrations.net
          # Still need to enable DNS challenge for wildcard domain certificates
          # sans:
          #     - "*.apex-migrations.net"
  options:
    defaultOptions:
      minVersion: VersionTLS12
      cipherSuites:
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256